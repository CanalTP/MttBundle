{% extends "CanalTPMttBundle::modal.html.twig" %}

{% block open_form %}
    {{ form_start(form) }}
{% endblock %}

{% block modal_title %}
    {{'frequency.form.title'|trans({}, 'default')}}
{% endblock %}


{% block modal_body %}
    {{ form_errors(form) }}
    <div id="block_frequencies_wrapper" data-count="{{ form.frequencies|length }}">
        {% for frequency in form.frequencies %}
            <div class="row">
                <div class="col-lg-12">
                    <h4 class="bold">
                        {{'frequency.form.subtitle'|trans({}, 'default')}} <span class="count-label">{{ loop.index }}</span> - 
                        <button type="button" class="btn btn-danger btn-xs delete-item-collection-btn">
                            <span class="glyphicon glyphicon-trash"></span> {{'global.delete'|trans}}
                        </button>
                    </h4>
                </div>
                <div class="col-lg-2">
                    {{ form_row(frequency.startTime) }}
                </div>
                <div class="col-lg-2">
                    {{ form_row(frequency.endTime) }}
                </div>
                <div class="col-lg-8">
                    {{ form_row(frequency.content) }}
                </div>
            </div>
            <hr/>
        {% endfor %}
    </div>
    <div class="text-center">
        {% if form.frequencies|length < 4 %}
        <button type="button" class="btn btn-success add-item-collection-btn">
            <span class="glyphicon glyphicon-plus"></span> {{'frequency.form.add_btn'|trans({}, 'default')}}
        </button>
        {% endif %}
    </div>
{% endblock %}

{% block modal_close_footer %}
    <button type="button" class="btn btn-default" data-dismiss="modal">{{'global.cancel'|trans}}</button>
{% endblock %}

{% block modal_actions %}
    <button type="submit" class="btn btn-success">
        <span class="glyphicon glyphicon-pencil"></span> {{'global.save'|trans}}
    </button>
    {{ form_end(form) }}
    <script>
        require(['jquery', 'mtt/utils', 'mtt/translations/messages'], function($, utils){
            var error_msg_keys = [],
            error_msg = [];
            var $msgWrapperTpl = utils.getTpl('msgWrapperTpl');
            
            $('.modal-dialog .form-with-collection').submit(function(){
                error_msg_keys = [];
                error_msg = [];
                var no_error = true;
                var $form = $(this);
                $form.find('.form-group').removeClass('has-error');
                var frequencies = $form.serializeObject().block_frequencies_coll.frequencies;
                for(var i = 0;i < frequencies.length;i++) {
                    if (frequencies[i].startTime.hour >= frequencies[i].endTime.hour) {
                        $form.find("#block_frequencies_wrapper .row")
                            .eq(i)
                            .find('.form-group div.bootstrap-time')
                            .parents('.form-group')
                            .addClass('has-error');
                        add_error_msg('error.start_end_time_incoherent');
                    }
                    for(var j = i + 1;j < frequencies.length;j++) {
                        if (
                            // startTime included in other range?
                            (frequencies[i].startTime.hour >= frequencies[j].startTime.hour && 
                            frequencies[i].startTime.hour <= frequencies[j].endTime.hour) ||
                            // endTime included in other range?
                            (frequencies[i].endTime.hour <= frequencies[j].endTime.hour && 
                            frequencies[i].endTime.hour >= frequencies[j].startTime.hour)
                        ) {
                            console.log('error between ' + i + ' and ' + j);
                            $form.find("#block_frequencies_wrapper .row").eq(i).find('.form-group').addClass('has-error');
                            $form.find("#block_frequencies_wrapper .row").eq(j).find('.form-group').addClass('has-error');
                            add_error_msg('error.frequencies_conflict');
                        }
                    }
                }
                display_errors();
                return error_msg.length == 0;
            });
            // mutualize with layout/validator.js
            var display_errors = function()
            {
                $msgWrapperTpl.find(':not(button)').remove();
                if (error_msg.length > 0)
                {
                    for (var error in error_msg)
                    {
                        $msgWrapperTpl.append('<div>' + error_msg[error] + '</div>');
                    }
                    $('.modal-body').prepend($msgWrapperTpl);
                }
            };
            
            var add_error_msg = function(msg_key)
            {
                // console.dir(msg_key);
                // console.log($.inArray(msg_key, error_msg_keys));
                if ($.inArray(msg_key, error_msg_keys) == -1) {
                    error_msg_keys.push(msg_key);
                    error_msg.push(Translator.trans(msg_key, {}, 'messages'));
                } 
            };
        });
    </script>
{% endblock %}
